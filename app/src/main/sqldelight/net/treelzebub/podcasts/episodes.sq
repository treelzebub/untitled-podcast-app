import kotlin.Boolean;

CREATE TABLE episode (
    id TEXT PRIMARY KEY NOT NULL,
    podcast_id TEXT NOT NULL
        REFERENCES podcast(id)
            ON DELETE CASCADE
            ON UPDATE CASCADE,
    podcast_title TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    date INTEGER NOT NULL,
    link TEXT NOT NULL,
    streaming_link TEXT NOT NULL,
    image_url TEXT,
    duration TEXT,
    has_played INTEGER AS Boolean NOT NULL DEFAULT 0,
    progress_seconds INTEGER NOT NULL DEFAULT 0,
    is_bookmarked INTEGER AS Boolean NOT NULL DEFAULT 0,
    is_archived INTEGER AS Boolean NOT NULL DEFAULT 0
);

upsert {
  UPDATE episode
  SET id = :id,
      podcast_id = :podcast_id,
      podcast_title = :podcast_title,
      title = :title,
      description = :description,
      date = :date,
      link = :link,
      streaming_link = :streaming_link,
      image_url = :image_url,
      duration = :duration
  WHERE id = :id;

  INSERT OR IGNORE INTO episode (id, podcast_id, podcast_title, title, description, date, link, streaming_link, image_url, duration)
  VALUES (:id, :podcast_id, :podcast_title, :title, :description, :date, :link, :streaming_link, :image_url, :duration);
}

get_all:
SELECT * FROM episode
ORDER BY date DESC;

get_all_unsort:
SELECT * FROM episode;

get_all_not_archived:
SELECT * FROM episode
WHERE is_archived = 0
ORDER BY date DESC;

get_by_id:
SELECT * FROM episode WHERE id = :id;

get_by_podcast_id:
SELECT * FROM episode
WHERE podcast_id = :podcast_id
ORDER BY date DESC;

-- get_latest_by_podcast_id:
-- SELECT MAX(date) AS latest FROM episode
-- WHERE podcast_id = :podcast_id;

get_latest_for_each_podcast:
SELECT podcast_id, MAX(date) AS latest
FROM episode
GROUP BY podcast_id
ORDER BY latest DESC;

-- Should we persist bookmarked_date and order by that?
get_bookmarked:
SELECT * FROM episode
WHERE is_bookmarked = 1
ORDER BY date DESC;

search_titles:
SELECT * FROM episode
WHERE title LIKE (:term || '%')
ORDER BY date DESC;

delete_all:
DELETE FROM episode;

set_is_bookmarked:
UPDATE episode
SET is_bookmarked = :is_bookmarked
WHERE episode.id = :id;

set_has_played:
UPDATE episode
SET has_played = :has_played
WHERE episode.id = :id;

set_is_archived:
UPDATE episode
SET is_archived = :is_archived
WHERE episode.id = :id;
